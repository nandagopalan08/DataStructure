package doublelinkedlist;

public class Double_linkedlist {
    public static void main(String[] args) {
        doublelinkedlist n = new doublelinkedlist();
        n.add(0);
        n.add(1);
        n.display();
        n.displaytail();
    }
}

class node {
    node next;
    node pre;
    int data;

    node(int val) {
        data = val;
        next = null;
        pre = null;
    }
}

class doublelinkedlist {
    node head;
    node tail;

    public void add(int val) {
        node newnode = new node(val);
        if (head == null) {
            head = newnode;
            tail = newnode;
        } else {
            tail.next = newnode;
            newnode.pre = tail;
            tail = newnode;
        }
    }

    void display() {
        node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    void displaytail() {
        node temp = tail;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.pre;
        }
        System.out.println("null");
    }

    public void addatpos(int pos, int val) {
        node newnode = new node(val);
        if (pos == 1) {
            newnode.next = head;
            head.pre = newnode;
            head = newnode;
            return;
        }
        node temp = head;
        for (int i = 1; i < pos - 1; i++) {
            temp = temp.next;
        }
        newnode.next = temp.next;
        if (temp.next != null) {
            temp.next.pre = newnode;
        }
        temp.next = newnode;
        newnode.pre = temp;
    }

    public void viewposition(int mypos) {
        node temp = head;
        for (int i = 1; i < mypos; i++) {
            temp = temp.next;
        }
        System.out.println("Value at position " + mypos + ": " + temp.data);
    }

    public void deletepos(int del) {
        if (del == 1) {
            head = head.next;
            if (head != null) {
                head.pre = null;
            }
            return;
        }
        node temp = head;
        for (int i = 1; i < del - 1; i++) {
            temp = temp.next;
        }
        temp.next = temp.next.next;
        if (temp.next != null) {
            temp.next.pre = temp;
        }
    }

    public void deletebegvain() {
        if (head != null) {
            head = head.next;
            if (head != null) {
                head.pre = null;
            }
        }
    }

    public void doubleaddbegin(int val, int pos) {
        node newnode = new node(val);
        node temp = head;
        for (int i = 1; i < pos - 1; i++) {
            temp = temp.next;
        }
        newnode.next = temp.next;
        if (temp.next != null) {
            temp.next.pre = newnode;
        }
        temp.next = newnode;
        newnode.pre = temp;
    }

    public void doubledeletepos(int pos) {
        deletepos(pos); // You can use deletepos logic here
    }
}
